2.10 Constructor
Constructors are member functions of a class or struct that initialize an object. The Core Guidelines define a constructor) as:

constructor: an operation that initializes (“constructs”) an object. Typically a constructor establishes an invariant 
nd often acquires resources needed for an object to be used (which are then typically released by a destructor).
A constructor can take arguments, which can be used to assign values to member variables.

    class Date {
    public:
    Date(int d, int m, int y) {  // This is a constructor.
        Day(d);
    }
    int Day() { return day; }
    void Day(int d) {
        if (d >= 1 && d <= 31) day = d;
    }
    int Month() { return month; }
    void Month(int m) {
        if (m >= 1 && m <= 12) month = m;
    }
    int Year() { return year_; }
    void Year(int y) { year = y; }

    private:
    int day{1};
    int month{1};
    int year{0};
    };
As you can see, a constructor is also able to call other member functions of the object it is constructing. 
In the example above, Date(int d, int m, int y) assigns a member variable by calling Day(int d).



Default Constructor
A class object is always initialized by calling a constructor. That might lead you to wonder 
how it is possible to initialize a class or structure that does not define any constructor at all.

For example:
    class Date { 
    int day{1};
    int month{1};
    int year{0};
    };

We can initialize an object of this class, even though this class does not explicitly define a constructor.

This is possible because of the default constructor. The compiler will define a default constructor, which accepts no arguments, 
http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#cctor-constructors-assignments-and-destructors
https://en.cppreference.com/w/cpp/language/default_constructor
for any class or structure that does not contain an explicitly-defined constructor



2.11 Scope Resolution
C++ allows different identifiers (variable and function names) to have the same name, as long as they have different scope. For example, 
https://en.cppreference.com/w/cpp/language/identifiers
two different functions can each declare the variable int i, because each variable only exists within the scope of its parent function.

In some cases, scopes can overlap, in which case the compiler may need assistance in determining which identifier the programmer means to use.
The process of determining which identifier to use is called "scope resolution".
https://docs.microsoft.com/en-us/cpp/cpp/scope-resolution-operator?view=msvc-160&viewFallbackFrom=vs-2019

2.11 Scope Resultion Operator
:: is the scope resolution operator. https://www.ibm.com/docs/en/i/7.4?topic=expressions-scope-resolution-operator-c-only
We can use this operator to specify which namespace or class to search in order to resolve an identifier.

Person::move(); \\ Call the move the function that is a member of the Person class.
std::map m; \\ Initialize the map container from the C++ Standard Library.  

Class
Each class provides its own scope. We can use the scope resolution operator to specify identifiers from a class.

This becomes particularly useful if we want to separate class declaration from class definition.

    class Date {
    public:
    int Day() const { return day; }
    void Day(int day);  // Declare member function Date::Day().
    int Month() const { return month; }
    void Month(int month) {
        if (month >= 1 && month <= 12) Date::month = month;
    }
    int Year() const { return year; }
    void Year(int year) { Date::year = year; }

    private:
    int day{1};
    int month{1};
    int year{0};
    };

    // Define member function Date::Day().
    void Date::Day(int day) {
    if (day >= 1 && day <= 31) Date::day = day;
    }

Namespaces
https://en.cppreference.com/w/cpp/language/namespace
Namespaces allow programmers to group logically related variables and functions together. Namespaces also help 
to avoid conflicts between to variables that have the same name in different parts of a program.

    namespace English {
    void Hello() { std::cout << "Hello, World!\n"; }
    }  // namespace English

    namespace Spanish {
    void Hello() { std::cout << "Hola, Mundo!\n"; }
    }  // namespace Spanish

    int main() {
    English::Hello();
    Spanish::Hello();
    }

In this example, we have two different void Hello() functions. If we put both of these functions in the same namespace, 
they would conflict and the program would not compile. However, by declaring each of these functions in a separate namespace, 
they are able to co-exist. Furthermore, we can specify which function to call by prefixing Hello() with the appropriate namespace, 
followed by the :: operator.



2.12 Initializer Lists
Initializer lists initialize member variables to specific values, just before the class constructor runs. 
This initialization ensures that class members are automatically initialized when an instance of the class is created.

    Date::Date(int day, int month, int year) : year_(y) {
    Day(day);
    Month(month);
    }
In this example, the member value year is initialized through the initializer list, 
while day and month are assigned from within the constructor. Assigning day and month allows us to apply the invariants set in the mutator.

In general, prefer initialization to assignment. Initialization sets the value as soon as the object exists, whereas assignment 
sets the value only after the object comes into being. This means that assignment creates and opportunity 
to accidentally use a variable before its value is set.

In fact, initialization lists ensure that member variables are initialized before the object is created. 
This is why class member variables can be declared const, but only if the member variable is initialized through an initialization list. 
Trying to initialize a const class member within the body of the constructor will not work.


2.13 Initialization constant member
Initializer lists exist for a number of reasons. First, the compiler can optimize initialization faster from an initialization list than 
from within the constructor.

A second reason is a bit of a technical paradox. If you have a const class attribute, you can only initialize it using an initialization list.
Otherwise, you would violate the const keyword simply by initializing the member in the constructor!

The third reason is that attributes defined as references must use initialization lists.



2.14 Encapsulation
Encapsulation is the grouping together of data and logic into a single unit. In object-oriented programming, 
classes encapsulate data and functions that operate on that data.

This can be a delicate balance, because on the one hand we want to group together relevant data and functions, 
but on the hand we want to limit member functions to only those functions that need direct access to the representation of a class.
http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c4-make-a-function-a-member-only-if-it-needs-direct-access-to-the-representation-of-a-class

However, a function that calculates the number of days in a month probably should be encapsulated with the class, 
because the class needs this function in order to operate correctly.



2.15 Accessor Functions
Accessor functions are public member functions that allow users to access an object's data, albeit indirectly.

const
Accessors should only retrieve data. They should not change the data stored in the object.

The main role of the const specifier in accessor methods is to protect member data. When you specify a member function as const, 
the compiler will prohibit that function from changing any of the object's member data.



2.16 Mutator Functions
A mutator ("setter") function can apply logic ("invariants") when updating member data.


2.22 Abstraction
Abstraction refers to the separation of a class's interface from the details of its implementation. 
The interface provides a way to interact with an object, while hiding the details and implementation of how the class works.

    class Date {
    public:
    ...
    std::string String() const;
    ...
    };

The user is able to interact with the Date class through the String() function, 
but the user does not need to know about the implementation of either Date or String().

For example, the user does not know, or need to know, that this object internally contains three int member variables. 
The user can just call the String() method to get data.

If the designer of this class ever decides to change how the data is stored internally 
-- using a vector of ints instead of three separate ints, for example -- the user of the Date class will not need to know.



Private method
Abstraction is used to expose only relevant information to the user. By hiding implementation details, we give ourselves flexibility 
to modify how the program works. In this example, you'll practice abstracting implementation details from the user.



2.25 Static Members
Class members can be declared static, which means that the member belongs to the entire class, instead of to a specific instance of the class.
More specifically, a static member is created only once and then shared by all instances (i.e. objects) of the class. 
That means that if the static member gets changed, either by a user of the class or within a member function of the class itself, 
then all members of the class will see that change the next time they access the static member.

Implementation
static members are declared within their class (often in a header file) but in most cases they must be defined within the global scope. 
That's because memory is allocated for static variables immediately when the program begins, 
at the same time any global variables are initialized.

    #include <cassert>

    class Foo {
    public:
    static int count;
    Foo() { Foo::count += 1; }
    };

    int Foo::count{0};

    int main() {
    Foo f{};
    assert(Foo::count == 1);
    }

An exception to the global definition of static members is if such members can be marked as constexpr. 
In that case, the static member variable can be both declared and defined within the class definition:

    struct Kilometer {
    static constexpr int meters{1000};
    };


Static Method

In addition to static member variables, C++ supports static member functions (or "methods"). Just like static member variables, 
static member functions are instance-independent: they belong to the class, not to any particular instance of the class.

One corollary to this is that we can method invoke a static member function without ever creating an instance of the class.
